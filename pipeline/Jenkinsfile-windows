pipeline {
    agent { label 'windows-spsdk' }
    // agent any
    options {
        timeout(time: 1, unit: 'HOURS', activity: true)   // timeout on whole pipeline job
    }
    stages {
        stage('Checkout') {
            steps {
                // checkout SPSDK repository
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'spsdk_repo'],
                        [$class: 'CloneOption', noTags: false, reference: '', shallow: false]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: 'git_credentials', url: 'ssh://git@bitbucket.sw.nxp.com/spsdk/spsdk.git']]
                ])
                // checkout plugins repository
                checkout([
                        $class: 'GitSCM',
                        branches: scm.branches,
                        doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                        extensions: scm.extensions + [[$class: 'CloneOption', noTags: false, reference: '', shallow: false]],
                        submoduleCfg: [],
                        userRemoteConfigs: scm.userRemoteConfigs
                    ])
            }
        }
        stage('Setup 3.9') {
            steps {
                    withPythonEnv('c:\\python39\\python.exe') {
                        bat 'python --version'
                        bat 'python -m pip install --upgrade pip'
                        bat 'cd spsdk_repo && pip install --upgrade ".[all]"'
                        bat 'cd spsdk_repo && pip install --upgrade -r requirements-develop.txt'
                    }
            }
        }
        stage('Codecheck 3.9') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    withPythonEnv('c:\\python39\\python.exe') {
                        bat '''
                    @echo off
                    setlocal enabledelayedexpansion
                    set exit_code=0
                    set packages=codecheck jlink lauterbach pemicro pqc pyocd pkcs11 pylint_plugins

                    for %%G in (%packages%) do (
                        echo ****************************************
                        echo Codecheck %%G
                        echo ****************************************
                        cd %%G
                        pip install --upgrade .
                        codecheck -s -o reports39
                        set codecheck_exit_code=!errorlevel!
                        cd ..
                        if not !codecheck_exit_code!==0 (
                            echo Codecheck failed for %%G
                            set exit_code=!codecheck_exit_code!
                        )
                    )
                    exit /b %exit_code%
                '''
                    }
                }
            }
        }
        stage('Setup 3.12') {
            steps {
                    withPythonEnv('c:\\python312\\python.exe') {
                        bat 'python --version'
                        bat 'python -m pip install --upgrade pip'
                        bat 'cd spsdk_repo && pip install --upgrade ".[all]"'
                        bat 'cd spsdk_repo && pip install --upgrade -r requirements-develop.txt'
                    }
            }
        }
        stage('Codecheck 3.12') {
            steps {
                withPythonEnv('c:\\python312\\python.exe') {
                    bat '''
                    @echo off
                    setlocal enabledelayedexpansion
                    set exit_code=0
                    rem pkcs11 does not support Python3.12
                    set packages=codecheck jlink lauterbach pemicro pqc pyocd pylint_plugins

                    for %%G in (%packages%) do (
                        echo ****************************************
                        echo Codecheck %%G
                        echo ****************************************
                        cd %%G
                        pip install --upgrade .
                        if "%%G"=="pkcs11" (
                            echo Skipping pytest codecheck for pkcs11
                            codecheck -s -o reports312 -dc pytest -dc pylint
                        ) else (
                            codecheck -s -o reports312
                        )
                        set codecheck_exit_code=!errorlevel!
                        cd ..
                        if not !codecheck_exit_code!==0 (
                            echo Codecheck failed for %%G
                            set exit_code=!codecheck_exit_code!
                        )
                    )
                    exit /b %exit_code%
                '''
                }
            }
        }
    }
        post {
            always {
                    archiveArtifacts artifacts: 'codecheck/reports39/**, jlink/reports39/**, lauterbach/reports39/**, pemicro/reports39/**, pqc/reports39/**, pyocd/reports39/**, pkcs11/reports39/**, pylint_plugins/reports39/**', fingerprint: true
                    archiveArtifacts artifacts: 'codecheck/reports312/**, jlink/reports312/**, lauterbach/reports312/**, pemicro/reports312/**, pqc/reports312/**, pyocd/reports312/**, pkcs11/reports312/**, pylint_plugins/reports312/**', fingerprint: true

            // emailext(body: '${DEFAULT_CONTENT}', mimeType: 'text/html',
            //  replyTo: '$DEFAULT_REPLYTO', subject: '${DEFAULT_SUBJECT}',
            //  to: emailextrecipients([[$class: 'CulpritsRecipientProvider'],
            //                          [$class: 'RequesterRecipientProvider']]))
            }
        }
}
